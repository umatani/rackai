#lang racket
(require
 "../../interpreter.rkt"
 ;"../../test/suites.rkt"
 (only-in "../../mix.rkt"                define-mixed-unit)
 "../../reduction.rkt"
 "../../signatures.rkt"
 "../../conc/full/terms.rkt"
 (only-in "../../mult/full/units.rkt"    eval/red@ expand/red@
                                         [parse@ mult:parse@])
 (only-in "../../mult/full/eval.rkt"     [--> set:-->])
 (only-in "../../mult/full/expander.rkt" [==> set:==>])
 (only-in "../full.rkt"                  main-minus@)
 (only-in "domain.rkt"                   domain@ val-‚ä§ atom-‚ä§ num-‚ä§ sym-‚ä§
                                         stx-‚ä§ list-‚ä§))
(provide interp)


;;;; Eval

(define-reduction (--> delta ==>) #:super (set:--> delta ==>)
  #:within-signatures [(only syntax^
                             add flip union prune)
                       (only env^
                             init-env lookup-env extend-env*)
                       (only store^
                             lookup-store update-store* alloc-loc*)
                       (only cont^
                             push-cont)
                       (only menv^
                             init-Œæ lookup-Œæ extend-Œæ)
                       (only mstore^
                             alloc-name alloc-scope alloc-ùìÅ lookup-Œ£ update-Œ£)
                       (only bind^
                             bind resolve)
                       (only parse^    parse)]
  ;; (syntax-local-value <abs> _ ...)
  [`(,(SApp _lbl `(,ph ,maybe-scp_i ,Œæ)
            `(,(Prim 'syntax-local-value _) ,id ,_ ...) '())
     ,cont ,store ,(and Œ£*_0 (Œ£* Œ£ _ _)))
   #:when (or (equal? id val-‚ä§) (equal? id atom-‚ä§)
              (equal? id stx-‚ä§))
   `(,val-‚ä§ ,cont ,store ,Œ£*_0)
   ev-lval-abs]

  ;; (syntax-local-identifier-as-binding <abs>)
  [`(,(SApp _lbl `(,ph ,maybe-scp_i ,Œæ)
            `(,(Prim 'syntax-local-identifier-as-binding _) ,id) '())
     ,cont ,store ,(and Œ£*_0 (Œ£* _ _ scps_u)))
   #:when (or (equal? id val-‚ä§)
              (equal? id atom-‚ä§)
              (equal? id stx-‚ä§)
              (and (Stx? id) (equal? (Stx-e id) sym-‚ä§)))
   `(,stx-‚ä§ ,cont ,store ,Œ£*_0)
   ev-lbinder-abs]

  ;; (syntax-local-bind-syntaxes <abs> <abs> <abs>)
  [`(,(SApp _lbl `(,ph ,maybe-scp_i ,Œæ)
            `(,(Prim 'syntax-local-bind-syntaxes _)
              ,ids ,rhs ,defs) '()) ,cont ,store ,Œ£*_0)
   #:when (or (or (equal? ids list-‚ä§)
                  (and (Pair? ids) (Null? (Pair-d ids))
                       (let ([id (Pair-a ids)])
                         (or (equal? id val-‚ä§)
                             (equal? id atom-‚ä§)
                             (equal? id stx-‚ä§)
                             (and (Stx? id) (equal? (Stx-e id) sym-‚ä§))))))
              (or (equal? rhs (Bool #f))
                  (equal? rhs val-‚ä§)
                  (equal? rhs atom-‚ä§)
                  (equal? rhs stx-‚ä§))
              (or (equal? defs val-‚ä§)
                  (equal? defs atom-‚ä§)))
   `(,list-‚ä§ ,cont ,store ,Œ£*_0)
   ev-slbs-abs]
  
  ;; (local-expand <abs> contextv idstops defs?)
  [`(,(SApp lbl `(,ph ,maybe-scp_i ,Œæ)
            `(,(Prim 'local-expand _)
              ,stx ,val_contextv ,val_idstops ,val_defs ...) '())
     ,cont ,store ,(and Œ£*_0 (Œ£* Œ£ _ _)))
   #:when (or (equal? stx val-‚ä§)
              (equal? stx atom-‚ä§)
              (equal? stx stx-‚ä§))
   `(,stx-‚ä§ ,cont ,store ,Œ£*_0)
   ev-lexpand-abs]

  ;; Œ≤ (<abs> ...)
  [`(,(SApp _lbl `(,_ph ,_maybe-scp_i ,_Œæ) (cons f _) '()) ,cont ,store ,Œ£*)
   #:when (equal? f val-‚ä§)
   `(,f ,cont ,store ,Œ£*)
   ev-Œ≤-abs]

  ;; (if <abs> ...)
  [`(,(SIf _lbl v _ tm_else) ,cont ,store ,Œ£*)
   #:when (or (equal? v val-‚ä§)
              (equal? v atom-‚ä§))
   `(,tm_else ,cont ,store ,Œ£*)
   ev-if-abs-#f])

(define-unit-from-reduction ev:red@ -->)


;;;; Parser

(define-mixed-unit parse@
  (import)
  (export  parse^)
  (inherit (mult:parse@ [mult:parse1 parse1] parse*))

  ; parse1 : Ph Stx Œ£ -> (SetM Ast)
  (define ((parse1 prs1 prs*) ph stx Œ£)
    (if (or (equal? stx val-‚ä§)
            (equal? stx atom-‚ä§)
            (equal? stx stx-‚ä§))
      (pure val-‚ä§)
      ((mult:parse1 prs1 prs*) ph stx Œ£)))

  ; parse : Ph Stx Œ£ -> (SetM Ast)
  (define parse (parse1 parse1 parse*)))

(define-mixed-unit parser@
  (import)
  (export  parser^)
  (inherit [parse@ parse])

  ; parser : Stx Œ£ ‚Üí (SetM Ast)
  (define (parser stx Œ£) (parse 0 stx Œ£)))


;;;; Expander

(define-reduction (==> -->) #:super (set:==> -->)
  #:within-signatures [(only syntax^
                             empty-ctx zip unzip add flip union in-hole
                             prune at-phase)
                       (only env^
                             init-env)
                       (only store^
                             init-store)
                       (only menv^
                             init-Œæ lookup-Œæ extend-Œæ)
                       (only mstore^
                             lookup-Œ£ alloc-name alloc-scope)
                       (only bind^
                             bind resolve id=?)
                       (only mcont^
                             push-Œ∫)
                       (only parse^    parse)]
  
  [(InEval (list stx_exp '‚Ä¢ store_0 Œ£*)
           (Œ∂ (StxŒæ ph (Stx #f ctx_i) Œæ) '‚àò Œ∫ _))
   #:when (or (equal? stx_exp val-‚ä§)
              (equal? stx_exp atom-‚ä§)
              (equal? stx_exp stx-‚ä§))
   (Œ∂ (StxŒæ ph stx_exp Œæ) '‚àò Œ∫ Œ£*)
   ex-macapp-flip-abs]

  ;; abstract value
  [(Œ∂ (StxŒæ ph val Œæ) '‚àò Œ∫ Œ£*)
   #:when (or (equal? val val-‚ä§)
              (equal? val atom-‚ä§)
              (equal? val num-‚ä§)
              (equal? val sym-‚ä§)
              (equal? val stx-‚ä§)
              (equal? val list-‚ä§))
   (Œ∂ val '‚Ä¢ Œ∫ Œ£*)
   ex-abs-‚ä§])

(define-unit-from-reduction ex:red@ ==>)

;;;; Main

(define-values/invoke-unit
  (compound-unit/infer
   (import) (export domain^ run^ debug^)
   (link domain@ main-minus@
         (() eval/red@   ev) (([ev : red^]) ev:red@)
         parse@ parser@
         (() expand/red@ ex) (([ex : red^]) ex:red@)))
  (import) (export domain^ run^ debug^))

(define interp (interpreter 'naive:full run delta Œ± ‚â§a #f))

(define (process form [mode 'eval]) ;; mode = read/expand/parse/eval
  (apply-interpreter interp form mode))


#;
(define (main [mode 'check])
  (run-suite run delta (suite 'core)   mode Œ± ‚â§a)
  (run-suite run delta (suite 'finite)   mode Œ± ‚â§a)
  (run-suite run delta (suite 'phases) mode Œ± ‚â§a)
  (run-suite run delta (suite 'full)   mode Œ± ‚â§a))
