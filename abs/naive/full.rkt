#lang racket
(require
 "../../reduction.rkt"
 "../../test/suites.rkt"

 (only-in "../../signatures.rkt"
          syntax^ env^ store^ cont^ menv^ mstore^ bind^ mcont^ parser^
          domain^ run^ debug^)
 (only-in "../../interp-base/full/terms.rkt"
          Var% Fun% App% If% VFun% Atom% Bool% Sym% Stx% List%
          Null% Pair% Prim%
          KApp% KIf% SApp% SIf% AstEnv% Œ∫% StxŒæ% Œ∂% ùìÅ% Œ£% Œ£*% Hole%
          TVar% TStop% Defs% InEval% InExpand%
          Lst lst->list snoc id? prim? stx-prim?)
 
 (only-in "../../interp-set/full/units.rkt" eval/red@ expand/red@)
 (only-in "../../interp-set/full/eval.rkt" [--> set:-->])
 (only-in "../../interp-set/full/expander.rkt" [==> set:==>])
 (only-in "../full.rkt" main-minus@)
 (only-in "domain.rkt" domain@ val-‚ä§ atom-‚ä§ stx-‚ä§ val? proper-stl?))
(provide run delta Œ± ‚â§a)


(define-reduction (--> delta ==>) #:super (set:--> delta ==>)
  #:within-signatures [(only syntax^
                             add flip union alloc-scope prune)
                       (only env^
                             init-env lookup-env extend-env)
                       (only store^
                             lookup-store update-store* alloc-loc*)
                       (only cont^
                             push-cont)
                       (only menv^
                             init-Œæ lookup-Œæ extend-Œæ)
                       (only mstore^
                             alloc-name alloc-ùìÅ lookup-Œ£ update-Œ£)
                       (only bind^
                             bind resolve)
                       (only parser^
                             parse)]
  ;; (syntax-local-value <abs> _ ...)
  [`(,(SApp _lbl `(,ph ,maybe-scp_i ,Œæ)
            `(,(Prim 'syntax-local-value _) ,id ,_ ...) '())
     ,cont ,store ,(and Œ£*_0 (Œ£* Œ£ _ _)))
   #:when (or (equal? id val-‚ä§) (equal? id atom-‚ä§)
              (equal? id stx-‚ä§))
   `(,val-‚ä§ ,cont ,store ,Œ£*_0)
   ev-lval-abs]

  ;; (local-expand <abs> contextv idstops defs?)
  [`(,(SApp lbl `(,ph ,maybe-scp_i ,Œæ)
            `(,(Prim 'local-expand _)
              ,stx ,val_contextv ,val_idstops ,val_defs ...) '())
     ,cont ,store ,(and Œ£*_0 (Œ£* Œ£ _ _)))
   #:when (or (equal? stx val-‚ä§)
              (equal? stx atom-‚ä§)
              (equal? stx stx-‚ä§))
   `(,stx-‚ä§ ,cont ,store ,Œ£*_0)
   ev-lexpand-abs]


  ;; Œ≤ (<abs> ...)
  [`(,(SApp _lbl `(,_ph ,_maybe-scp_i ,_Œæ) (cons f _) '()) ,cont ,store ,Œ£*)
   #:when (equal? f val-‚ä§)
   `(,f ,cont ,store ,Œ£*)
   ev-Œ≤-abs]

  ;; (if <abs> ...)
  [`(,(SIf _lbl (? (Œª (v) (or (equal? v val-‚ä§) (equal? v atom-‚ä§))))
           _ tm_else) ,cont ,store ,Œ£*)
   `(,tm_else ,cont ,store ,Œ£*)
   ev-if-abs-#f]
  )

(define-unit-from-reduction ev:red@ -->)


(define-reduction (==> -->) #:super (set:==> -->)
  #:within-signatures [(only syntax^
                             empty-ctx zip unzip add flip union in-hole
                             alloc-scope prune at-phase)
                       (only env^
                             init-env)
                       (only store^
                             init-store)
                       (only menv^
                             init-Œæ lookup-Œæ extend-Œæ)
                       (only mstore^
                             lookup-Œ£ alloc-name)
                       (only bind^
                             bind resolve id=?)
                       (only mcont^
                             push-Œ∫)
                       (only parser^
                             parse)]
  
  [(InEval (list (? Stx? stx_exp) '‚Ä¢ store_0 Œ£*)
           (Œ∂ (StxŒæ ph (Stx #f ctx_i) Œæ) '‚àò Œ∫ _))
   (if (equal? stx_exp stx-‚ä§)
       (Œ∂ (StxŒæ ph stx_exp Œæ) '‚àò Œ∫ Œ£*)
       (let ([scp_i (car (set->list (at-phase ctx_i ph)))])
         (Œ∂ (StxŒæ ph (flip ph stx_exp scp_i) Œæ) '‚àò Œ∫ Œ£*)))
   ex-macapp-flip]

  ;; stx-‚ä§
  [(Œ∂ (StxŒæ ph (and stx (Stx 'stx-‚ä§ _)) Œæ) '‚àò Œ∫ Œ£*)
   (Œ∂ stx '‚Ä¢ Œ∫ Œ£*)
   ex-stx-‚ä§])

(define-unit-from-reduction ex:red@ ==>)

;; Main

(define-values/invoke-unit
  (compound-unit/infer
   (import) (export run^ debug^)
   (link main-minus@
         (() eval/red@   ev) (([ev : red^]) ev:red@)
         (() expand/red@ ex) (([ex : red^]) ex:red@)))
  (import) (export run^ debug^))

(define-values/invoke-unit domain@
  (import) (export domain^))

(define (main [mode 'check])
  (run-suite run delta (suite 'core)   mode Œ± ‚â§a)
  (run-suite run delta (suite 'phases) mode Œ± ‚â§a)
  (run-suite run delta (suite 'full)   mode Œ± ‚â§a))
